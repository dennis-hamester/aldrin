--- example1-orig.rs
+++ example1-patched.rs
@@ -5,12 +5,12 @@
 
 #[derive(Debug, Clone, Default)]
 #[non_exhaustive]
-pub struct MyStruct {
+pub struct MyStructRenamed {
     pub field1: Option<u32>,
     pub field2: Option<u32>,
 }
 
-impl MyStruct {
+impl MyStructRenamed {
     pub fn new() -> Self {
         Default::default()
     }
@@ -20,21 +20,21 @@
     }
 }
 
-impl aldrin_client::codegen::aldrin_proto::FromValue for MyStruct {
+impl aldrin_client::codegen::aldrin_proto::FromValue for MyStructRenamed {
     fn from_value(v: aldrin_client::codegen::aldrin_proto::Value) -> Result<Self, aldrin_client::codegen::aldrin_proto::ConversionError> {
         let mut v = match v {
             aldrin_client::codegen::aldrin_proto::Value::Struct(v) => v,
             _ => return Err(aldrin_client::codegen::aldrin_proto::ConversionError),
         };
 
-        Ok(MyStruct {
+        Ok(MyStructRenamed {
             field1: v.remove(&1).unwrap_or(aldrin_client::codegen::aldrin_proto::Value::None).convert()?,
             field2: v.remove(&2).unwrap_or(aldrin_client::codegen::aldrin_proto::Value::None).convert()?,
         })
     }
 }
 
-impl aldrin_client::codegen::aldrin_proto::IntoValue for MyStruct {
+impl aldrin_client::codegen::aldrin_proto::IntoValue for MyStructRenamed {
     fn into_value(self) -> aldrin_client::codegen::aldrin_proto::Value {
         let mut v = std::collections::HashMap::new();
         if let Some(field1) = self.field1 {
@@ -72,8 +72,8 @@
         self
     }
 
-    pub fn build(self) -> MyStruct {
-        MyStruct {
+    pub fn build(self) -> MyStructRenamed {
+        MyStructRenamed {
             field1: self.field1,
             field2: self.field2,
         }
