WHITESPACE = _{ WHITE_SPACE }
COMMENT = _{ "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }

lit_pos_nonzero_int = @{ ('1'..'9') ~ ('0'..'9')* }
lit_pos_int = @{ "0" | lit_pos_nonzero_int }
lit_int = @{ "0" | ("-"? ~ lit_pos_nonzero_int) }

lit_string_char = @{ "\\\"" | (!("\"" | NEWLINE) ~ ANY) }
lit_string = @{ "\"" ~ lit_string_char* ~ "\"" }

lit_uuid = @{
    ASCII_HEX_DIGIT{8}
    ~ "-" ~ ASCII_HEX_DIGIT{4}
    ~ "-" ~ ASCII_HEX_DIGIT{4}
    ~ "-" ~ ASCII_HEX_DIGIT{4}
    ~ "-" ~ ASCII_HEX_DIGIT{12}
}

ident = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
module = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_" | "-")* }

bool_type = { "bool" }
int_type = { "u8" | "u16" | "u32" | "u64" | "i8" | "i16" | "i32" | "i64" }
float_type = { "f32" | "f64" }
string_type = { "string" }
uuid_type = { "uuid" }
value_type = { "value" }
vec_type = { "vec" ~ "<" ~ type_name ~ ">" }
map_key_type = _{ int_type | string_type | uuid_type }
map_type = { "map" ~ "<" ~ map_key_type ~ "->" ~ type_name ~ ">" }
set_type = { "set" ~ "<" ~ map_key_type ~ ">" }
extern_type_name = ${ module ~ "::" ~ ident }

type_name = _{
    bool_type
    | int_type
    | float_type
    | string_type
    | uuid_type
    | value_type
    | vec_type
    | map_type
    | set_type
    | extern_type_name
    | ident
}

type_name_or_inline = _{ struct_inline | enum_inline | type_name }

file = _{
    SOI
    ~ import_stmt*
    ~ (
        service_def
        | struct_def
        | enum_def
        | const_def
    )*
    ~ EOI
}

required_mark = { "required" }
optional_mark = { "optional" }

import_stmt = { "import" ~ module ~ ";"? }

struct_def = { "struct" ~ ident ~ "{" ~ struct_body ~ "}" ~ ";"? }
struct_inline = { "struct" ~ "{" ~ struct_body ~ "}" }
struct_body = { struct_field* }
struct_field = { required_mark? ~ ident ~ "@" ~ lit_pos_int ~ "=" ~ type_name_or_inline ~ ";"? }

enum_def = { "enum" ~ ident ~ "{" ~ enum_body ~ "}" ~ ";"? }
enum_inline = { "enum" ~ "{" ~ enum_body ~ "}" }
enum_body = { enum_variant+ }
enum_variant = { ident ~ "@" ~ lit_pos_int ~ ("=" ~ optional_mark? ~ type_name_or_inline)? ~ ";"? }

service_def = { "service" ~ ident ~ "{" ~ service_uuid ~ service_version ~ service_body ~ "}" ~ ";"? }
service_uuid = _{ "uuid" ~ "=" ~ lit_uuid ~ ";"? }
service_version = _{ "version" ~ "=" ~ lit_pos_int ~ ";"? }
service_body = _{ (fn_def | event_def)* }

fn_def = { "fn" ~ ident ~ "@" ~ lit_pos_int ~ ("{" ~ fn_body ~ "}")? ~ ";"? }
fn_body = _{ fn_args? ~ fn_ok? ~ fn_err? }
fn_args = { "args" ~ "=" ~ optional_mark? ~ type_name_or_inline ~ ";"? }
fn_ok = { "ok" ~ "=" ~ optional_mark? ~ type_name_or_inline ~ ";"? }
fn_err = { "err" ~ "=" ~ optional_mark? ~ type_name_or_inline ~ ";"? }

event_def = { "event" ~ ident ~ "@" ~ lit_pos_int ~ ("=" ~ optional_mark? ~ type_name_or_inline)? ~ ";"? }

const_def = { "const" ~ ident ~ "=" ~ const_value ~ ";"? }
const_value = _{
    const_u8
    | const_i8
    | const_u16
    | const_i16
    | const_u32
    | const_i32
    | const_u64
    | const_i64
    | const_string
    | const_uuid
}
const_u8 = { "u8" ~ "(" ~ lit_pos_int ~ ")" }
const_i8 = { "i8" ~ "(" ~ lit_int ~ ")" }
const_u16 = { "u16" ~ "(" ~ lit_pos_int ~ ")" }
const_i16 = { "i16" ~ "(" ~ lit_int ~ ")" }
const_u32 = { "u32" ~ "(" ~ lit_pos_int ~ ")" }
const_i32 = { "i32" ~ "(" ~ lit_int ~ ")" }
const_u64 = { "u64" ~ "(" ~ lit_pos_int ~ ")" }
const_i64 = { "i64" ~ "(" ~ lit_int ~ ")" }
const_string = { "string" ~ "(" ~ lit_string ~ ")" }
const_uuid = { "uuid" ~ "(" ~ lit_uuid ~ ")" }
