// Copyright (c) 2019 Dennis Hamester <dennis.hamester@gmail.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

WHITESPACE = _{ WHITE_SPACE }
COMMENT = _{ "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }

ident = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
number = @{ ASCII_DIGIT+ }
module = @{ ident }
uuid = @{
    ASCII_HEX_DIGIT{8}
    ~ "-" ~ ASCII_HEX_DIGIT{4}
    ~ "-" ~ ASCII_HEX_DIGIT{4}
    ~ "-" ~ ASCII_HEX_DIGIT{4}
    ~ "-" ~ ASCII_HEX_DIGIT{12}
}
version = @{ (ASCII_ALPHANUMERIC | "." | "-")+ }
quoted_string = @{ "\"" ~ (!("\"" | NEWLINE) ~ ANY)* ~ "\"" }

int_type = { "u8" | "u16" | "u32" | "u64" | "i8" | "i16" | "i32" | "i64" }
float_type = { "f32" | "f64" }
string_type = { "string" }
uuid_type = { "uuid" }
vec_type = { "vec" ~ "<" ~ type_name ~ ">" }
map_key_type = _{ int_type | string_type | uuid_type }
map_type = { "map" ~ "<" ~ map_key_type ~ "->" ~ type_name ~ ">" }
set_type = { "set" ~ "<" ~ map_key_type ~ ">" }
extern_type_name = ${ module ~ "::" ~ ident }

type_name = _{
    int_type
    | float_type
    | string_type
    | uuid_type
    | vec_type
    | map_type
    | set_type
    | extern_type_name
    | ident
}

type_name_or_inline = _{ struct_inline | enum_inline | type_name }

file = _{
    SOI
    ~ import_stmt*
    ~ (
        service_def
        | struct_def
        | enum_def
    )*
    ~ EOI
}

import_stmt = { "import" ~ module ~ ";"? }

struct_def = { "struct" ~ ident ~ "{" ~ struct_body ~ "}" ~ ";"? }
struct_inline = { "struct" ~ "{" ~ struct_body ~ "}" }
struct_body = { struct_field* }
struct_field_req = { "required" }
struct_field = { struct_field_req? ~ ident ~ "@" ~ number ~ "=" ~ type_name ~ ";"? }

enum_def = { "enum" ~ ident ~ "{" ~ enum_body ~ "}" ~ ";"? }
enum_inline = { "enum" ~ "{" ~ enum_body ~ "}" }
enum_body = { enum_variant+ }
enum_variant = { ident ~ "@" ~ number ~ ("=" ~ type_name_or_inline)? ~ ";"? }

service_def = { "service" ~ ident ~ "{" ~ service_uuid ~ service_version ~ service_body ~ "}" ~ ";"? }
service_uuid = _{ "uuid" ~ "=" ~ uuid ~ ";"? }
service_version = _{ "version" ~ "=" ~ version ~ ";"? }
service_body = _{ (fn_def | event_def)* }

attr_depr = { "#[" ~ "deprecated" ~ "(" ~ version ~ "," ~ quoted_string ~ ")" ~ "]" }

fn_def = { attr_depr? ~ "fn" ~ ident ~ "@" ~ number ~ ("{" ~ fn_body ~ "}")? ~ ";"? }
fn_body = _{ fn_args? ~ fn_ok? ~ fn_err? }
fn_args = { "args" ~ "=" ~ type_name_or_inline ~ ";"? }
fn_ok = { "ok" ~ "=" ~ type_name_or_inline ~ ";"? }
fn_err = { "err" ~ "=" ~ type_name_or_inline ~ ";"? }

event_def = { "event" ~ ident ~ "@" ~ number ~ ("=" ~ type_name_or_inline)? ~ ";"? }
