name: CI

on:
  push:
    branches-ignore:
    - 'wip/**'

env:
  CARGO_INCREMENTAL: 0
  RUSTFLAGS: -D warnings -A unknown-lints

jobs:

  ci-aldrin:
    uses: ./.github/workflows/check-component.yaml
    with:
      component: aldrin

  ci-aldrin-broker:
    uses: ./.github/workflows/check-component.yaml
    with:
      component: aldrin-broker

  ci-aldrin-codegen:
    uses: ./.github/workflows/check-component.yaml
    with:
      component: aldrin-codegen

  ci-aldrin-conformance-tester:
    uses: ./.github/workflows/check-component.yaml
    with:
      component: aldrin-conformance-tester

  ci-aldrin-core:
    uses: ./.github/workflows/check-component.yaml
    with:
      component: aldrin-core

  ci-aldrin-gen:
    uses: ./.github/workflows/check-component.yaml
    with:
      component: aldrin-gen

  ci-aldrin-macros:
    uses: ./.github/workflows/check-component.yaml
    with:
      component: aldrin-macros

  ci-aldrin-parser:
    uses: ./.github/workflows/check-component.yaml
    with:
      component: aldrin-parser

  ci-aldrin-test:
    uses: ./.github/workflows/check-component.yaml
    with:
      component: aldrin-test

  ci-conformance-test-broker:
    uses: ./.github/workflows/check-component.yaml
    with:
      component: conformance-test-broker

  ci-example-bookmarks:
    uses: ./.github/workflows/check-component.yaml
    with:
      component: example-bookmarks

  ci-example-broker:
    uses: ./.github/workflows/check-component.yaml
    with:
      component: example-broker

  ci-example-downloader:
    uses: ./.github/workflows/check-component.yaml
    with:
      component: example-downloader

  ci-example-echo:
    uses: ./.github/workflows/check-component.yaml
    with:
      component: example-echo

  ci-example-introspect:
    uses: ./.github/workflows/check-component.yaml
    with:
      component: example-introspect

  ci-example-media-player:
    uses: ./.github/workflows/check-component.yaml
    with:
      component: example-media-player

  doc:
    name: Check docs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: Cache
        uses: Swatinem/rust-cache@v2
      - name: Cargo doc (no default features)
        run: cargo doc --locked --no-default-features --no-deps
      - name: Cargo doc (all features)
        run: cargo doc --locked --all-features --no-deps

  style:
    name: Code style
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: Cargo fmt
        run: cargo fmt -- --check

  conformance:
    name: Protocol conformance tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: Cache
        uses: Swatinem/rust-cache@v2
      - name: Build aldrin-conformance-tester
        run: cargo build --locked -p aldrin-conformance-tester
      - name: Build conformance-test-broker
        run: cargo build --locked -p conformance-test-broker
      - name: Run conformance tests
        run: target/debug/aldrin-conformance-tester run -j1 target/debug/conformance-test-broker

  cargo-deny:
    name: Check cargo-deny
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.checks == 'advisories' }}
    strategy:
      matrix:
        checks:
          - advisories
          - bans licenses sources
    steps:
      - uses: actions/checkout@v5
      - uses: EmbarkStudios/cargo-deny-action@v2
        with:
          command: check ${{ matrix.checks }}

  miri-aldrin:
    name: Test aldrin under Miri
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          components: miri, rust-src
      - name: Run tests under miri
        run: cargo miri test --all-features -p aldrin

  miri-aldrin-core:
    name: Test aldrin-core under Miri
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          components: miri, rust-src
      - name: Run tests under miri
        run: cargo miri test --all-features -p aldrin-core
